DROP SEQUENCE AE_seq ; 
create sequence AE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger AE_PK_trig 
before insert on AE
for each row 
begin 
select AE_seq.nextval into :new.employee_id from dual; 
end; 
/
alter table AE add created date ; 
alter table AE add created_by VARCHAR2 (255) ; 
alter table AE add row_version_number integer ; 
alter table AE add updated date ; 
alter table AE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger AE_AUD_trig 
before insert or update on AE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_seq ; 
create sequence NL_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_PK_trig 
before insert on NL
for each row 
begin 
select NL_seq.nextval into :new.list_seq_id from dual; 
end; 
/
alter table NL add created date ; 
alter table NL add created_by VARCHAR2 (255) ; 
alter table NL add row_version_number integer ; 
alter table NL add updated date ; 
alter table NL add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_AUD_trig 
before insert or update on NL 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NLM_seq ; 
create sequence NLM_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NLM_PK_trig 
before insert on NLM
for each row 
begin 
select NLM_seq.nextval into :new.id from dual; 
end; 
/
alter table NLM add created date ; 
alter table NLM add created_by VARCHAR2 (255) ; 
alter table NLM add row_version_number integer ; 
alter table NLM add updated date ; 
alter table NLM add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NLM_AUD_trig 
before insert or update on NLM 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX AE_employee_id_FK_0 ;
CREATE INDEX AE_employee_id_FK_0 ON NLM(AE_employee_id) ;
DROP INDEX NL_list_seq_id_FK_1 ;
CREATE INDEX NL_list_seq_id_FK_1 ON NLM(NL_list_seq_id) ;
DROP INDEX NL_list_seq_id1_FK_2 ;
CREATE INDEX NL_list_seq_id1_FK_2 ON NLM(NL_list_seq_id1) ;
